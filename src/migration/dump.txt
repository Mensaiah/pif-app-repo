total size: 148.5MB

rows: [
  {
    "Table": "_import_products",
    "Rows": 51,
    "Size (MB)": "0.0469"
  },
  {
    "Table": "categories",
    "Rows": 123,
    "Size (MB)": "0.1250"
  },
  {
    "Table": "category_icons",
    "Rows": 16,
    "Size (MB)": "0.0156"
  },
  {
    "Table": "category_langs",
    "Rows": 394,
    "Size (MB)": "0.0625"
  },
  {
    "Table": "category_marketplace",
    "Rows": 207,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "cities",
    "Rows": 3,
    "Size (MB)": "0.0156"
  },
  {
    "Table": "cities_langs",
    "Rows": 12,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "cities_marketplace",
    "Rows": 3,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "customer_service",
    "Rows": 14,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "drive_file",
    "Rows": 148,
    "Size (MB)": "0.1250"
  },
  {
    "Table": "drive_folder",
    "Rows": 83,
    "Size (MB)": "0.0938"
  },
  {
    "Table": "gift_criteria_history",
    "Rows": 1,
    "Size (MB)": "0.0156"
  },
  {
    "Table": "info_box",
    "Rows": 0,
    "Size (MB)": "0.0156"
  },
  {
    "Table": "internal_categories",
    "Rows": 12,
    "Size (MB)": "0.0156"
  },
  {
    "Table": "migrations",
    "Rows": 183,
    "Size (MB)": "0.0156"
  },
  {
    "Table": "partner_contract_documents",
    "Rows": 0,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "partner_pos",
    "Rows": 984,
    "Size (MB)": "0.2031"
  },
  {
    "Table": "partner_settlings",
    "Rows": 335,
    "Size (MB)": "0.0938"
  },
  {
    "Table": "partner_slice_codes",
    "Rows": 2,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "partners",
    "Rows": 331,
    "Size (MB)": "0.2031"
  },
  {
    "Table": "password_resets",
    "Rows": 10,
    "Size (MB)": "0.0469"
  },
  {
    "Table": "permissions",
    "Rows": 160,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "privacy_policy",
    "Rows": 1,
    "Size (MB)": "0.0156"
  },
  {
    "Table": "product_category",
    "Rows": 20548,
    "Size (MB)": "1.9063"
  },
  {
    "Table": "product_city",
    "Rows": 88,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "product_codes",
    "Rows": 163190,
    "Size (MB)": "20.5781"
  },
  {
    "Table": "product_langs",
    "Rows": 21942,
    "Size (MB)": "9.3438"
  },
  {
    "Table": "product_promotions",
    "Rows": 8,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "product_sort_order",
    "Rows": 137,
    "Size (MB)": "0.0625"
  },
  {
    "Table": "product_tag",
    "Rows": 8919,
    "Size (MB)": "0.4531"
  },
  {
    "Table": "product_vouchers",
    "Rows": 529,
    "Size (MB)": "0.0938"
  },
  {
    "Table": "product_vouchers_uses",
    "Rows": 351,
    "Size (MB)": "0.0625"
  },
  {
    "Table": "products",
    "Rows": 8099,
    "Size (MB)": "2.7344"
  },
  {
    "Table": "push_messages",
    "Rows": 78,
    "Size (MB)": "0.0625"
  },
  {
    "Table": "role_permission",
    "Rows": 397,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "roles",
    "Rows": 20,
    "Size (MB)": "0.0469"
  },
  {
    "Table": "settlements",
    "Rows": 159,
    "Size (MB)": "0.0156"
  },
  {
    "Table": "settlements_details",
    "Rows": 448,
    "Size (MB)": "0.0781"
  },
  {
    "Table": "tags",
    "Rows": 1591,
    "Size (MB)": "0.1406"
  },
  {
    "Table": "terms_and_conditions",
    "Rows": 1,
    "Size (MB)": "0.0156"
  },
  {
    "Table": "test",
    "Rows": 14,
    "Size (MB)": "0.0156"
  },
  {
    "Table": "user_permission",
    "Rows": 2,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "user_pif_favorites",
    "Rows": 0,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "users",
    "Rows": 356,
    "Size (MB)": "0.1563"
  },
  {
    "Table": "users_pif",
    "Rows": 24267,
    "Size (MB)": "2.8281"
  },
  {
    "Table": "users_pif_chats",
    "Rows": 2659,
    "Size (MB)": "0.6250"
  },
  {
    "Table": "users_pif_contacts",
    "Rows": 625523,
    "Size (MB)": "97.1719"
  },
  {
    "Table": "users_pif_details",
    "Rows": 6818,
    "Size (MB)": "1.0625"
  },
  {
    "Table": "users_pif_devices",
    "Rows": 7787,
    "Size (MB)": "3.0156"
  },
  {
    "Table": "users_pif_kickback_points",
    "Rows": 437,
    "Size (MB)": "0.0781"
  },
  {
    "Table": "users_pif_net_axept_payment_methods",
    "Rows": 0,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "users_pif_payment_methods",
    "Rows": 26,
    "Size (MB)": "0.0313"
  },
  {
    "Table": "users_pif_proportions",
    "Rows": 3744,
    "Size (MB)": "0.4375"
  },
  {
    "Table": "users_pif_purchase",
    "Rows": 5374,
    "Size (MB)": "2.5625"
  },
  {
    "Table": "users_pif_purchase_history",
    "Rows": 98,
    "Size (MB)": "0.0781"
  },
  {
    "Table": "users_pif_request",
    "Rows": 481,
    "Size (MB)": "0.1094"
  },
  {
    "Table": "users_pif_reward_system_points",
    "Rows": 53,
    "Size (MB)": "0.0625"
  },
  {
    "Table": "users_pif_socials",
    "Rows": 3648,
    "Size (MB)": "0.3750"
  },
  {
    "Table": "users_pif_transactions",
    "Rows": 3819,
    "Size (MB)": "2.7656"
  },
  {
    "Table": "widok_tmp_users_pif_purchase",
    "Rows": null,
    "Size (MB)": null
  }
]

DB Size in GB: [
  {
    "DB Name": "pif-demo",
    "DB Size in GB": "0.1450"
  }
]


`SELECT table_name AS "Table", table_rows AS "Rows", ROUND(((data_length + index_length) / 1024 / 1024), 4) AS "Size (MB)" FROM information_schema.TABLES WHERE table_schema = "${appConfig.sqlDbName}";`

// Query the total database size in GB
    const [dbSize] = await sql.query(
      `SELECT table_schema "DB Name", ROUND(SUM(data_length + index_length) / 1024 / 1024 / 1024, 4) "DB Size in GB" FROM information_schema.tables WHERE table_schema = "${appConfig.sqlDbName}";`
    );

, {})
mongoWriteOps: {
  "insertedCount": 0,
  "matchedCount": 123,
  "modifiedCount": 0,
  "deletedCount": 0,
  "upsertedCount": 0,
  "upsertedIds": {},
  "insertedIds": {}
}

City Migration
mongoWriteOps: {
  "insertedCount": 0,
  "matchedCount": 3,
  "modifiedCount": 0,
  "deletedCount": 0,
  "upsertedCount": 0,
  "upsertedIds": {},
  "insertedIds": {}
}


query user, role and their permissions
SELECT 
      users.*,
      roles.space AS roleSpace,
      roles.key AS roleKey,
      roles.name AS roleName,
      roles.description AS roleDescription,
      roles.weight AS roleWeight,
      roles.deleted_at AS roleDeletedAt,
      GROUP_CONCAT(permissions.key) AS permissions
    FROM 
      users
    LEFT JOIN 
      roles 
      ON users.role_id = roles.id
    LEFT JOIN 
      role_permission 
      ON roles.id = role_permission.role_id
    LEFT JOIN 
      permissions 
      ON role_permission.permission_id = permissions.id
    GROUP BY
      users.id;

fs.writeFile('user.json', JSON.stringify(rows, null, 2), (err) => {
    if (err) throw err;
    console.log('Data written to file');
  });